<%
	pluginName = 'BDSPlugin';

	cc_error_msg_approvals = measure('code-center-error-message')
	cc_bom_url = measure('cc-app-bom-url')

	comp_list_pending_json = measure('comp-list-pending-json')
	comp_list_approved_json = measure('comp-list-approved-json')
	comp_list_rejected_json = measure('comp-list-rejected-json')
	comp_list_unknown_json = measure('comp-list-ns-json')
	cc_custom_attributes_json = measure('custom-attributes')
	
	approved_count = measure('requests-approved')
	rejected_count = measure('requests-rejected')
	pending_count = measure('requests-pending')
	ns_count = measure('requests-not-submitted')

%>
<script type="text/javascript">
function loadjsfile(filename){
    var fileref=document.createElement('script')
    fileref.setAttribute("type","text/javascript")
    fileref.setAttribute("src", filename)
    if (typeof fileref!="undefined")
        document.getElementsByTagName("head")[0].appendChild(fileref)
}
function loadcssfile(filename){
    var fileref=document.createElement("link")
    fileref.setAttribute("rel", "stylesheet")
    fileref.setAttribute("type", "text/css")
    fileref.setAttribute("href", filename)
    if (typeof fileref!="undefined")
        document.getElementsByTagName("head")[0].appendChild(fileref)
}

loadcssfile("<%= url_for_static(:plugin => pluginName, :path => 'font-awesome/css/font-awesome.min.css') -%>")	
loadcssfile("<%= url_for_static(:plugin => pluginName, :path => 'datatables/css/demo_table_jui.css') -%>")	
loadcssfile("<%= url_for_static(:plugin => pluginName, :path => 'datatables/css/jquery.dataTables.css') -%>")	
loadcssfile("<%= url_for_static(:plugin => pluginName, :path => 'jquery-ui-1.11.4/jquery-ui.min.css') -%>")	
loadcssfile("<%= url_for_static(:plugin => pluginName, :path => 'jquery-ui-1.11.4/jquery-ui.structure.min.css') -%>")	
loadcssfile("<%= url_for_static(:plugin => pluginName, :path => 'jquery-ui-1.11.4/jquery-ui.theme.min.css') -%>")	
loadcssfile("<%= url_for_static(:plugin => pluginName, :path => 'common/bds_common.css') -%>")	
loadcssfile("<%= url_for_static(:plugin => pluginName, :path => 'spop/css/jquery.smallipop.css') -%>")	
loadcssfile("<%= url_for_static(:plugin => pluginName, :path => 'qtip/jquery.qtip.css') -%>")
loadcssfile("<%= url_for_static(:plugin => pluginName, :path => 'comp_approve/comp_approve.css') -%>")	
</script>
	<!-- UI Theme -->
<!--
	<script type="text/javascript"  src="<%= url_for_static(:plugin => pluginName, :path => 'datatables/jquery.dataTables.min.js') -%>  "></script>
	<script type="text/javascript" src="<%= url_for_static(:plugin => pluginName, :path => 'datatables/jquery.dataTables.columnFilter.js') -%>  "></script>
	<script type="text/javascript" src="<%= url_for_static(:plugin => pluginName, :path => 'jquery-ui/jquery-ui-1.10.4.min.js') -%>  "></script>
	<script type="text/javascript" src="<%= url_for_static(:plugin => pluginName, :path => 'common/bds_common_functions.js') -%>  "></script>
	<script type="text/javascript" src="<%= url_for_static(:plugin => pluginName, :path => 'spop/jquery.smallipop.min.js') -%>  "></script>
	<script type="text/javascript" src="<%= url_for_static(:plugin => pluginName, :path => 'spop/contrib/modernizr.js') -%>  "></script>
  	<script type="text/javascript" src="<%= url_for_static(:plugin => pluginName, :path => 'qtip/jquery.qtip.min.js') -%>  "></script>
-->
<script type="text/javascript">

	var bdRequire = require.config({
	  paths: {
	  	jquery: "..<%= url_for_static(:plugin => pluginName, :path => 'jquery-ui-1.11.4/external/jquery/jquery') -%>"
	  }
	});
			var localDataTable; // global	
			var dtTableName = "#comp-request-table-data"; // id of the table that will be generated
			var approvedJsonList = <%=comp_list_approved_json.data%>;
			var rejectedJsonList = <%=comp_list_rejected_json.data%>;
			var pendingJsonList = <%=comp_list_pending_json.data%>;
			var unknownJsonList = <%=comp_list_unknown_json.data%>;
	
			var fullDataList = [];
		
				// Function for centering
					
			var centerFunction = function (data, type, row)
	            	{	            		
	            		return  '<center>' + data + '</center>';
	            	}
	
		bdRequire(["<%= url_for_static(:plugin => pluginName, :path => 'common/bds_common_functions.js') -%>"],
		    function()
		  	{		
				// Populate Counts and Colors
				var $appCountUI = jQuery('.status-approved-count');		
				setColorAndValue($appCountUI, "darkGreen", <%=approved_count.value%>);

				var $rejCountUI = jQuery('.status-rejected-count');		
				setColorAndValue($rejCountUI, "darkRed", <%=rejected_count.value%>);
				
				var $penCountUI = jQuery('.status-pending-count');		
				setColorAndValue($penCountUI, "darkOrange", <%=pending_count.value%>);
				
				var $nsCountUI = jQuery('.status-ns-count');		
				setColorAndValue($nsCountUI, "black", <%=ns_count.value%>);
			});
		
		// Create table data
		var vulnWidth = "7%";	
		var columnData =  [
        	 { 
            	"mData": "requestType",
            	"sTitle": "", 	  
            	"sWidth": "5%",
            	"mRender" : function (data, type, row)
            	{
        			var fontAwesomeIcon = "";
		            var className = "";	
            			
            	    if(type === 'display')
            	    {
            			var classColor = [];

	            		switch(data)
	            		{	            						            		
	            			case "APPROVED":
	            			{
	            				className = "approved-icon";
	            				fontAwesomeIcon = "<i class='fa fa-check'>";
	            			 	break;
	            			}
            				case "REJECTED":
	            			{
	            				className = "rejected-icon";
	            				fontAwesomeIcon = "<i class='fa fa-times'>";
	            			 	break;
	            			}
            				case "PENDING":
	            			{
	            				className = "pending-icon";
	            				fontAwesomeIcon = "<i class='fa fa-question'>";
	            			 	break;
	            			}
            				case "NOTSUBMITTED":
	            			{
	            				className = "ns-icon";
	            				fontAwesomeIcon = "<i class='fa fa-shopping-cart'>";
	            			 	break;
	            			}			            			
	            		}
	            		var combinedClassName = "column-icon " + className;
            			data = '<div class="' + combinedClassName + '">' + fontAwesomeIcon + '</i></div>';
	            		return data;
	            	} // display
	            	
	            	return data;
            	}          
            }, 
            { 
            	"mData": "componentName",
            	"sTitle": "Component Name",
            	"sWidth": "18%",
            	"fnCreatedCell": function(nTd, sData, oData, iRow, iCol) 
            	{
            		// This is used by the tooltip
			        nTd.title = oData.componentName;
			    },
            	"mRender": function (data, type, row)
            	{	            		
            		return  '<a href="'+ row.url +'" target="_new">' + data + '</a>';
            	}
            }, 
            { 
           	 	"mData": "version", 
           	 	"sTitle": "Version",      
           	 	"sWidth": "8%",
            	"mRender": centerFunction  
            }, 
            { 
           	 	"mData": "vulnHigh", 
           	 	"sTitle": "High Vuln",
           	 	"sWidth": vulnWidth,
            	"mRender": centerFunction
            }, 
            { 
           	 	"mData": "vulnMed", 
           	 	"sTitle": "Med Vuln",
           	 	"sWidth": vulnWidth,
            	"mRender": centerFunction
            }, 
            { 
           	 	"mData": "vulnLow", 
           	 	"sTitle": "Low Vuln",
           	 	"sWidth": vulnWidth,
            	"mRender": centerFunction
            }
        ];

		// Create the table

		bdRequire([
				"<%= url_for_static(:plugin => pluginName, :path => 'datatables/jquery.dataTables.min.js') -%>",
				"<%= url_for_static(:plugin => pluginName, :path => 'datatables/jquery.dataTables.columnFilter.js') -%>",
				"<%= url_for_static(:plugin => pluginName, :path => 'spop/jquery.smallipop.min.js') -%>",
				"<%= url_for_static(:plugin => pluginName, :path => 'common/bds_common_functions.js') -%>"
				],			
			function()
	   	  	{	
			addToMasterList(approvedJsonList, fullDataList);
		console.log("Approved: Count of approved list: " + approvedJsonList.length+"  approved:"+approvedJsonList);
			addToMasterList(rejectedJsonList, fullDataList);
		console.log("Rejected: Count of rejected list: " + rejectedJsonList.length+"  rejected:"+rejectedJsonList);
			addToMasterList(pendingJsonList, fullDataList);
		console.log("Pending: Count of pending list: " + pendingJsonList.length+"  pending:"+pendingJsonList);
			addToMasterList(unknownJsonList, fullDataList);
		console.log("Unknown: Count of unknown list: " + unknownJsonList.length+"  unknown:"+unknownJsonList);
		console.log("Approvals: Count of master list: " + fullDataList.length)

	      		createTable(dtTableName, fullDataList, columnData, 0);
        	}
        	);      

		bdRequire(["<%= url_for_static(:plugin => pluginName, :path => 'datatables/jquery.dataTables.min.js') -%>",
				"<%= url_for_static(:plugin => pluginName, :path => 'datatables/jquery.dataTables.columnFilter.js') -%>",
				"<%= url_for_static(:plugin => pluginName, :path => 'qtip/jquery.qtip.min.js') -%>",
				"<%= url_for_static(:plugin => pluginName, :path => 'common/bds_common_functions.js') -%>"
				],
	   		function()
    	  	{		
    	  		// Resize
    			 var localDataTable = jQuery(dtTableName).dataTable;		 
    			 jQuery(window).bind('resize', function () {
    			    localDataTable.fnAdjustColumnSizing();
    			 });
    			 
    			 // Row selector
    			 var prevClickedRowNum;
    			 var filterBoxCss = jQuery(divFilterInfoBoxName);
    			 var sameRow = false;
    			 jQuery(dtTableName + ' tbody').on( 'click', 'tr', function(event)
    			 { 
    			 	var clickedRowNum = localDataTable.fnGetPosition(this);
    			
    			 	// Remove everything
    			 	jQuery("td."+divRowSelectedName, localDataTable.fnGetNodes()).removeClass(divRowSelectedName);					
    			
    				
    				// Only perform the class selection if the user did not select the same row	
    				if(prevClickedRowNum == null || prevClickedRowNum != clickedRowNum)
    				{
    					// This is a hack, however when certain columns are clicked
    					// The parent is not the TR, but the TD, thus the 'find' does not return anything.
    					// This checks to see if the adequate number of children exist, if not, finds the grandparent.
    					prevClickedRowNum = clickedRowNum;
    					var parent = jQuery(event.target).parent();
    					if(parent.children().length == 1)
    						parent = parent.parent();
    					parent.find("td").addClass(divRowSelectedName);	
    				}
     				else
     				{
     					sameRow = true;
     				}
    		        
    		        ////////////////////////
    		        // Grab the row's data
    		        var aPos = localDataTable.fnGetPosition(this);
               		var aData = localDataTable.fnGetData(aPos);
               	
           			// Issue filter based on component name
           			var compName = aData.componentName;
           			var versionNumber = aData.version;
           			filterByComponentAndVersion(compName, 0, versionNumber, 1, "#"+vulnTableName);
           			
           			// Expose the filter-info-box and inject information into it.  
           			if(sameRow)   
           			{
           				filterBoxCss.hide();
           				sameRow = false;
       				}
           			else   	
           			{		
           				filterBoxCss.show();
           			}
           			var infoBoxMsg = "Filtering on component: " + compName + ", Version: " + versionNumber;
           			filterBoxCss.text(infoBoxMsg);
    			 });
			 
			  // Custom attributes          
		      // Populate custom attributes if any
        <% if cc_custom_attributes_json %>
              var cc_att_json = <%=cc_custom_attributes_json.data%>;
              var html_attrib_list = "";
              for(var i=0; i < cc_att_json.length; i++)
              {
              	var attrib_element = cc_att_json[i];
              	// Keep on building the 
              	if(attrib_element != null)
                  html_attrib_list = html_attrib_list + buildHtmlToolTip(attrib_element.question, attrib_element.answer);
          	  }
          	  console.log("HTML:" + html_attrib_list);
          
              // Create a tooltip for the info button
              buildToolTip(".cc-tooltip-info", "Application Attributes", html_attrib_list);          
        <% end %> 
		});
		
	</script>

  <div class="title-header">
    <h1> Component Approvals</h1>
	</div>
  
  <!-- HANDLE ERROR CASE -->
  
 
  <% if !cc_error_msg_approvals.nil? and !cc_error_msg_approvals.data.nil? %>
    <br><br>
    <div class="error-message">
      Error: <%=cc_error_msg_approvals.data %>
    </div>
  <% else %>
	
	<!-- START CONTENT -->
    
    <% if cc_custom_attributes_json %>
     <div class="cc-tooltip-info">
  	   <i class="fa fa-info-circle"></i>
  	 </div>
    <% end %> 	   
    <div class="cc-link"> 
      <a href="<%=cc_bom_url.data%>" target="_blank" title="Code Center BOM"><i class="fa fa-share-square-o"></i></a>
    </div>

	   
	<!-- Separate the top divs from the bottom divs, important or behavior changes -->
	<br>
	


<br>

	<div class="table-outer">
		<div class="grouping-numbers-bar">
			<div class="status-grouping-approved">
				<div class="status-approved-title" onclick="javascript:filterColumnByValue(0, dtTableName, this)">
					Approved
				</div>
				<div class="status-approved-count">
				</div>
				<div class="status-approved-trend">
					<%=trend_icon(approved_count, :big => true)%>
				</div>
			</div>
		
			<div class="status-grouping-pending">
				<div class="status-pending-title" onclick="javascript:filterColumnByValue(0, dtTableName, this)">
					Pending
				</div>
				<div class="status-pending-count"></div>
					<div class="status-pending-trend">
					<%=trend_icon(pending_count, :big => true)%>
				</div>
			</div>
			
			<div class="status-grouping-rejected">
				<div class="status-rejected-title" onclick="javascript:filterColumnByValue(0, dtTableName, this)">
					Rejected
				</div>
				<div class="status-rejected-count"></div>
					<div class="status-rejected-trend">
					<%=trend_icon(rejected_count, :big => true)%>
				</div>
			</div>
	
			<div class="status-grouping-ns">
				<div class="status-ns-title" onclick="javascript:filterColumnByValue(0, dtTableName, this)">
					Not Submitted
				</div>
				<div class="status-ns-count"></div>
					<div class="status-ns-trend">
					<%=trend_icon(ns_count, :big => true)%>
				</div>
			</div>
		</div>
		<table id="comp-request-table-data" class="table display">
			<thead></thead>
			<tbody></tbody>
			<tfoot></tfoot>
		</table>
		<br>
		<img class="logo" src="<%= url_for_static(:plugin => pluginName, :path => 'common/bd_logo.png') -%> ">
	</div>
<% end %>
